// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-kysely"
  output   = "../dist"
  fileName = "index.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  firstName String
  lastName  String
  email     String?    @unique
  image     String?
  bio       String?    @db.Text
  roles     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  accounts        Account[]
  posts           BlogPost[]
  comments        BlogPostComment[]
  authoredCourses Course[]
  enrolledCourses CourseEnrollment[]
  courseReviews   CourseReview[]
}

model Account {
  id           String @id @default(dbgenerated("gen_random_uuid()"))
  providerId   String
  providerName String
  userId       String
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Session {
  sid    String   @id
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@index([expire])
}

model BlogPost {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  content   Json
  excerpt   String?  @db.Text
  image     String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId   String
  author     User              @relation(fields: [authorId], references: [id])
  category   Category?         @relation(fields: [categoryId], references: [id])
  categoryId Int?
  tags       Tag[]
  comments   BlogPostComment[]
}

model BlogPostComment {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  author   User     @relation(fields: [authorId], references: [id])
  postId   String
  post     BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?
  parent   BlogPostComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  BlogPostComment[] @relation("CommentReplies")
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?    @db.Text
  posts       BlogPost[]
  courses     Course[]
}

model Tag {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  posts BlogPost[]
}

model Course {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String   @db.Text
  price       Float
  oldPrice    Float?
  image       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // FAQ as JSON
  faq Json?

  // Relations
  authorId    String
  author      User               @relation(fields: [authorId], references: [id])
  categoryId  Int?
  category    Category?          @relation(fields: [categoryId], references: [id])
  modules     Module[]
  enrollments CourseEnrollment[]
  reviews     CourseReview[]
}

model Module {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]
}

model Lesson {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  title     String
  content   Json
  position  Int
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model CourseEnrollment {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model CourseReview {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  rating    Int      @db.SmallInt
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  approved  Boolean  @default(false)

  // Relations
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
